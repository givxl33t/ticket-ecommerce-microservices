// Code generated by MockGen. DO NOT EDIT.
// Source: internal/publisher/ticket_publisher.go
//
// Generated by this command:
//
//	mockgen -source=internal/publisher/ticket_publisher.go -destination=test/unit/mocks/ticket_publisher_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	domain "ticketing/tickets/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockTicketPublisher is a mock of TicketPublisher interface.
type MockTicketPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockTicketPublisherMockRecorder
	isgomock struct{}
}

// MockTicketPublisherMockRecorder is the mock recorder for MockTicketPublisher.
type MockTicketPublisherMockRecorder struct {
	mock *MockTicketPublisher
}

// NewMockTicketPublisher creates a new mock instance.
func NewMockTicketPublisher(ctrl *gomock.Controller) *MockTicketPublisher {
	mock := &MockTicketPublisher{ctrl: ctrl}
	mock.recorder = &MockTicketPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketPublisher) EXPECT() *MockTicketPublisherMockRecorder {
	return m.recorder
}

// Created mocks base method.
func (m *MockTicketPublisher) Created(ticket *domain.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Created", ticket)
	ret0, _ := ret[0].(error)
	return ret0
}

// Created indicates an expected call of Created.
func (mr *MockTicketPublisherMockRecorder) Created(ticket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Created", reflect.TypeOf((*MockTicketPublisher)(nil).Created), ticket)
}

// Updated mocks base method.
func (m *MockTicketPublisher) Updated(ticket *domain.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updated", ticket)
	ret0, _ := ret[0].(error)
	return ret0
}

// Updated indicates an expected call of Updated.
func (mr *MockTicketPublisherMockRecorder) Updated(ticket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updated", reflect.TypeOf((*MockTicketPublisher)(nil).Updated), ticket)
}
