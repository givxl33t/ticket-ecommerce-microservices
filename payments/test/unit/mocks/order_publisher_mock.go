// Code generated by MockGen. DO NOT EDIT.
// Source: internal/publisher/order_publisher.go
//
// Generated by this command:
//
//	mockgen -source=internal/publisher/order_publisher.go -destination=test/unit/mocks/order_publisher_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	domain "ticketing/payments/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderPublisher is a mock of OrderPublisher interface.
type MockOrderPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockOrderPublisherMockRecorder
	isgomock struct{}
}

// MockOrderPublisherMockRecorder is the mock recorder for MockOrderPublisher.
type MockOrderPublisherMockRecorder struct {
	mock *MockOrderPublisher
}

// NewMockOrderPublisher creates a new mock instance.
func NewMockOrderPublisher(ctrl *gomock.Controller) *MockOrderPublisher {
	mock := &MockOrderPublisher{ctrl: ctrl}
	mock.recorder = &MockOrderPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderPublisher) EXPECT() *MockOrderPublisherMockRecorder {
	return m.recorder
}

// Cancelled mocks base method.
func (m *MockOrderPublisher) Cancelled(order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancelled", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancelled indicates an expected call of Cancelled.
func (mr *MockOrderPublisherMockRecorder) Cancelled(order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancelled", reflect.TypeOf((*MockOrderPublisher)(nil).Cancelled), order)
}

// Created mocks base method.
func (m *MockOrderPublisher) Created(order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Created", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Created indicates an expected call of Created.
func (mr *MockOrderPublisherMockRecorder) Created(order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Created", reflect.TypeOf((*MockOrderPublisher)(nil).Created), order)
}
